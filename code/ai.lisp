(letrec (
  (at (lambda (l i) (if (eq i 0) (car l) (call at (cdr l) (sub i 1)))))
  (head (lambda (l n)
    (if (add (atom l) (eq n 0))
       0
       (cons (car l) (call head (cdr l) (sub n 1))))))
  (asfind (lambda (l x)
    (if (atom l) 0
      (if (eq x (car (car l)))
        (cdr (car l))
        (call asfind (cdr l) x)))))
  (dx (list 1 2 1 0))
  (dy (list 0 1 2 1))
  (pil 0)
  (mod (lambda (x y) (sub x (mul y (div x y)))))
  (abs (lambda (x) (if (gt 0 x) (sub 0 x) x))))
(letrec (
  (mapat (lambda (map x y) (call at (call at map y) x)))
  (asupdate (lambda (l x y) (cons (cons x (add y (call asfind l x))) l)))
  (visited 0)
  (adjghost (lambda (x y g) (if (atom g) 0
    (let ((gx (car (car (cdr (car g)))))
          (gy (cdr (car (cdr (car g)))))
          (d 0))
      (set d (add (call abs (sub x gx)) (call abs (sub y gy))))
      (if (gt pil 300)
        0
        (if (gt 2 d)
          1
          (call adjghost x y (cdr g)))))))))
(let (
  (dirtest (lambda (map x y dir g)
    (let ((nx (sub (add x (call at dx dir)) 1))
          (ny (sub (add y (call at dy dir)) 1)))
      (if (eq 0 (call mapat map nx ny)) 0
        (if (call adjghost nx ny g) 0 1))))))
(let (
  (step (lambda (gst world)
     (let ((map (car world))
           (st  (car (cdr world)))
           (ghosts (car (cdr (cdr world))))
           (t (cdr gst))
           (a (car gst))
           (p 0) (x 0) (y 0)
           (nx 0) (ny 0) (nk 0) (ansk 1000) (ansz 0))
       (set pil (car st))
       (set p (car (cdr st)))
       (set x (car p))
       (set y (cdr p))
       (let ((update (lambda (dir)
         (if (call dirtest map x y dir ghosts)
           (seq
             (set nx (sub (add x (call at dx dir)) 1))
             (set ny (sub (add y (call at dy dir)) 1))
             (set nk (call asfind visited (add nx (mul ny 1000))))
             (if (gt ansk nk)
               (seq (set ansk nk) (set ansz dir))
               (seq)))
           (seq)))))
         (call update (call mod (add a 0) 4))
         (call update (call mod (add a 1) 4))
         (call update (call mod (add a 2) 4))
         (call update (call mod (add a 3) 4))
         (set nx (sub (add x (call at dx ansz)) 1))
         (set ny (sub (add y (call at dy ansz)) 1))
         (set visited
           (call head (call asupdate visited (add nx (mul ny 1000)) 1) 10000))
         (cons (cons ansz (add t 1)) ansz))))))
  (cons (cons 0 1) step)
))))
